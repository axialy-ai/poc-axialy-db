name: Axialy DB AWS

on:
  workflow_dispatch:
    inputs:
      db_identifier:
        description: "AWS RDS instance identifier"
        required: true
        default: "axialy-database-cluster"

      aws_region:
        description: "AWS region (e.g. us-west-1, us-east-1)"
        required: true
        default: "us-west-1"

      instance_class:
        description: "RDS instance class"
        required: true
        default: "db.t3.micro"

      allocated_storage:
        description: "Allocated storage in GB"
        required: true
        default: "20"

      cleanup_on_exit:
        description: "Destroy everything after the run (true/false)"
        required: false
        default: "true"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID:            ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:        ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:           ${{ github.event.inputs.aws_region }}
      TF_VAR_suffix:                ${{ github.run_id }}
      TF_VAR_prevent_destroy:       "false"
      TF_VAR_deletion_protection:   "false"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ github.event.inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false

      - name: Terraform init
        working-directory: infra/database-aws
        run: terraform init -input=false

      - name: Terraform apply
        id: tfout
        working-directory: infra/database-aws
        run: |
          terraform apply -auto-approve -input=false \
            -var="db_identifier=${{ github.event.inputs.db_identifier }}" \
            -var="aws_region=${{ github.event.inputs.aws_region }}" \
            -var="instance_class=${{ github.event.inputs.instance_class }}" \
            -var="allocated_storage=${{ github.event.inputs.allocated_storage }}"

          echo "db_endpoint=$(terraform output -raw db_endpoint)"          >> "$GITHUB_OUTPUT"
          echo "db_port=$(terraform output -raw db_port)"                  >> "$GITHUB_OUTPUT"
          echo "db_admin_user=$(terraform output -raw db_admin_user)"      >> "$GITHUB_OUTPUT"
          echo "db_admin_password=$(terraform output -raw db_admin_password)" >> "$GITHUB_OUTPUT"

      - name: Wait for RDS instance to be available
        run: |
          echo "Waiting for RDS instance to be available…"
          aws rds wait db-instance-available \
            --db-instance-identifier ${{ github.event.inputs.db_identifier }}
          echo "RDS instance is now available"
          sleep 30

      - name: Load database schemas
        if: success()
        env:
          DB_HOST: ${{ steps.tfout.outputs.db_endpoint }}
          DB_PORT: ${{ steps.tfout.outputs.db_port }}
          DB_USER: ${{ steps.tfout.outputs.db_admin_user }}
          DB_PASS: ${{ steps.tfout.outputs.db_admin_password }}
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y mysql-client

          for i in {1..5}; do
            mysql --host="$DB_HOST" --port="$DB_PORT" \
                  --user="$DB_USER" --password="$DB_PASS" \
                  --connect-timeout=30 -e "SELECT 1" && break || true
            echo "Connection failed; retrying in 30 s ($i/5)…"
            sleep 30
          done

          for db in axialy_admin axialy_ui; do
            mysql --host="$DB_HOST" --port="$DB_PORT" \
                  --user="$DB_USER" --password="$DB_PASS" \
                  -e "CREATE DATABASE IF NOT EXISTS $db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
            mysql --host="$DB_HOST" --port="$DB_PORT" \
                  --user="$DB_USER" --password="$DB_PASS" \
                  "$db" < "db/$db.sql"
          done

      - name: Save database credentials as repository secrets
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          gh secret set DB_HOST     --body "${{ steps.tfout.outputs.db_endpoint }}"
          gh secret set DB_PORT     --body "${{ steps.tfout.outputs.db_port }}"
          gh secret set DB_USER     --body "${{ steps.tfout.outputs.db_admin_user }}"
          gh secret set DB_PASSWORD --body "${{ steps.tfout.outputs.db_admin_password }}"

      - name: Display deployment summary
        run: |
          echo "========================================"
          echo "AWS RDS Database deployed & initialized!"
          echo "========================================"
          echo "Instance : ${{ github.event.inputs.db_identifier }}"
          echo "Region   : ${{ github.event.inputs.aws_region }}"
          echo "Host     : ${{ steps.tfout.outputs.db_endpoint }}"
          echo "Port     : ${{ steps.tfout.outputs.db_port }}"
          echo "User     : ${{ steps.tfout.outputs.db_admin_user }}"
          echo "========================================"

  cleanup:
    if: ${{ always() && github.event.inputs.cleanup_on_exit == 'true' }}
    needs: deploy
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID:            ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:        ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:           ${{ github.event.inputs.aws_region }}
      TF_VAR_suffix:                ${{ github.run_id }}
      TF_VAR_prevent_destroy:       "false"
      TF_VAR_deletion_protection:   "false"

    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ github.event.inputs.aws_region }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false

      - name: Terraform init
        working-directory: infra/database-aws
        run: terraform init -input=false

      - name: Terraform destroy (clean‑up)
        working-directory: infra/database-aws
        run: |
          terraform destroy -auto-approve -input=false \
            -var="db_identifier=${{ github.event.inputs.db_identifier }}" \
            -var="aws_region=${{ github.event.inputs.aws_region }}" \
            -var="instance_class=${{ github.event.inputs.instance_class }}" \
            -var="allocated_storage=${{ github.event.inputs.allocated_storage }}"
